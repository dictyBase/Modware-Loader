[create_table_temp_cvterm]
        CREATE TEMP TABLE temp_cvterm (
           name varchar(1024) NOT NULL, 
           accession varchar(1024) NOT NULL, 
           is_obsolete integer NOT NULL DEFAULT 0, 
           is_relationshiptype integer NOT NULL DEFAULT 0, 
           definition varchar(4000), 
           cmmnt varchar(4000), 
           cv_id integer NOT NULL, 
           db_id integer NOT NULL
         )

[create_table_temp_cvterm_relationship]
	        CREATE TEMP TABLE temp_cvterm_relationship (
               subject varchar(256) NOT NULL, 
               object varchar(256) NOT NULL, 
               type varchar(256) NULL, 
               subject_db_id integer NOT NULL, 
               object_db_id integer NOT NULL, 
               type_db_id integer NOT NULL
        )

[create_table_temp_cvterm_synonym]
	        CREATE TEMP TABLE temp_cvterm_synonym (
               accession varchar(256) NOT NULL, 
               syn varchar(1024) NOT NULL, 
               syn_scope_id integer NOT NULL, 
               db_id integer NOT NULL
            )
 
[create_table_temp_cvterm_comment]
	        CREATE TEMP TABLE temp_cvterm_comment (
               accession varchar(256) NOT NULL, 
               comment varchar(1024) NOT NULL, 
               comment_type_id integer NOT NULL, 
               db_id integer NOT NULL
            )

[create_table_temp_accession]
           CREATE TEMP TABLE temp_accession (
               accession varchar(256) NOT NULL
           )

[create_table_temp_cvterm_exist]
           CREATE TEMP TABLE temp_accession_exist (
               accession varchar(256) NOT NULL,
               cvterm_id integer NOT NULL
               )

[create_table_temp_synonym]
           CREATE TEMP TABLE temp_synonym_update (
               cvterm_id integer not null,
               syn varchar(1024) NOT NULL, 
               syn_scope_id integer NOT NULL 
            )


[select_non_existing_cvterm]
			SELECT cvterm.cvterm_id, dbxref.dbxref_id FROM cvterm
			INNER JOIN dbxref ON cvterm.dbxref_id=dbxref.dbxref_id
			LEFT JOIN temp_cvterm tmcv ON (
				tmcv.accession = dbxref.accession
				AND
				tmcv.db_id = dbxref.db_id
			)
			WHERE tmcv.accession IS NULL
			AND tmcv.db_id IS NULL
			AND cvterm.cv_id IN (SELECT cv_id FROM temp_cvterm)
			AND dbxref.db_id IN (SELECT db_id FROM temp_cvterm)

[select_fresh_cvterm]
    	SELECT fresh.* FROM (
    	   SELECT tmcv.name fname, cvterm.name oname, cvterm.cvterm_id
    		 FROM cvterm
    		 INNER JOIN dbxref ON dbxref.dbxref_id = cvterm.dbxref_id
    		 INNER JOIN temp_cvterm tmcv ON (
    		 	dbxref.accession = tmcv.accession
    		 	AND 
    		 	dbxref.db_id = tmcv.db_id
    		 )
    	) AS fresh
    	WHERE fresh.fname != fresh.oname

[select_existing_cvterm]
		SELECT tmacc.cvterm_id, tmcv.definition, tmcv.is_obsolete 
    		 FROM temp_accession_exist tmacc
    		 INNER JOIN temp_cvterm tmcv ON 
    		 	tmacc.accession = tmcv.accession
    		 

[insert_dbxref]
			INSERT INTO dbxref(accession, db_id)
			SELECT tmcv.accession, tmcv.db_id FROM temp_cvterm tmcv
			LEFT JOIN dbxref ON (
			     tmcv.accession = dbxref.accession
			     AND
			     tmcv.db_id = dbxref.db_id
            )
			WHERE dbxref.accession is NULL
			AND 
			dbxref.db_id IS NULL

[insert_cvterm]
    		INSERT INTO cvterm(name, is_obsolete, is_relationshiptype,
    		  definition, cv_id, dbxref_id)
			SELECT tmcv.name,tmcv.is_obsolete,tmcv.is_relationshiptype, 
			tmcv.definition,tmcv.cv_id,dbxref.dbxref_id 
			FROM temp_cvterm tmcv
			INNER JOIN temp_accession tmacc ON 
			     tmcv.accession=tmacc.accession
			INNER JOIN dbxref ON (
			  dbxref.accession=tmcv.accession
			  AND dbxref.db_id=tmcv.db_id
			)

[insert_comment]
    INSERT INTO cvtermprop(cvterm_id, type_id, value)
		SELECT cvterm.cvterm_id, tcomm.comment_type_id, tcomm.comment
		FROM temp_cvterm_comment tcomm
		INNER JOIN temp_accession tmacc ON
		    tcomm.accession = tmacc.accession
		INNER JOIN dbxref ON (
			dbxref.accession = tcomm.accession
			AND dbxref.db_id = tcomm.db_id
		)
		INNER JOIN cvterm ON
		    dbxref.dbxref_id = cvterm.dbxref_id

[insert_updated_synonym_in_temp]
        INSERT INTO temp_synonym_update(cvterm_id,syn,syn_scope_id)
	       SELECT cvterm.cvterm_id,syn2.syn,syn2.syn_scope_id 
    		FROM (
    		 SELECT count(cvsyn.synonym) syncount, dbxref.accession 
    		 FROM cvterm
    		 INNER JOIN cvtermsynonym cvsyn ON cvsyn.cvterm_id = cvterm.cvterm_id
    		 INNER JOIN dbxref ON dbxref.dbxref_id = cvterm.dbxref_id
    		 WHERE cvterm.is_obsolete = 0
    		 GROUP BY dbxref.accession
            ) esyn 
			INNER JOIN (
             SELECT count(tsyn.syn) syncount, tsyn.accession
             FROM temp_cvterm_synonym tsyn
    		 GROUP BY tsyn.accession 
    		) nsyn ON
    		  esyn.accession = nsyn.accession
    		  INNER JOIN temp_cvterm_synonym syn2 ON 
    		    syn2.accession = nsyn.accession
    		  INNER JOIN dbxref ON (
    		  	dbxref.accession = syn2.accession
    		  	AND
    		  	dbxref.db_id = syn2.db_id
    		  )
    		  INNER JOIN cvterm ON
    		    cvterm.dbxref_id = dbxref.dbxref_id
    		WHERE   	
    		esyn.syncount < nsyn.syncount

[insert_synonym]
	INSERT INTO cvtermsynonym(synonym, type_id, cvterm_id)
		SELECT tsyn.syn, tsyn.syn_scope_id, cvterm.cvterm_id
		FROM temp_cvterm_synonym tsyn
		INNER JOIN temp_accession tmacc ON
		    tsyn.accession = tmacc.accession
		INNER JOIN dbxref ON (
			dbxref.accession = tsyn.accession
			AND dbxref.db_id = tsyn.db_id
		)
		INNER JOIN cvterm ON
		    dbxref.dbxref_id = cvterm.dbxref_id

[insert_relationship]
        INSERT INTO cvterm_relationship(object_id, subject_id, type_id)
		SELECT object.cvterm_id, subject.cvterm_id, type.cvterm_id
        FROM temp_cvterm_relationship tmprel

        INNER JOIN dbxref dbobject ON (
        	dbobject.accession = tmprel.object AND
        	dbobject.db_id = tmprel.object_db_id 
        )
        INNER JOIN cvterm object ON
        object.dbxref_id = dbobject.dbxref_id

        INNER JOIN dbxref dbsubject ON (
        	dbsubject.accession = tmprel.subject AND
        	dbsubject.db_id = tmprel.subject_db_id 
        )
        INNER JOIN cvterm subject ON
        subject.dbxref_id = dbsubject.dbxref_id

        INNER JOIN dbxref dbtype ON (
        	dbtype.accession = tmprel.type AND
        	dbtype.db_id = tmprel.type_db_id 
        )
        INNER JOIN cvterm type ON
        type.dbxref_id = dbtype.dbxref_id
             
      EXCEPT
      SELECT cvrel.object_id, cvrel.subject_id, cvrel.type_id
      FROM cvterm_relationship cvrel

[insert_new_accession]
INSERT INTO temp_accession(accession)
           SELECT tmcv.accession FROM temp_cvterm tmcv
			LEFT JOIN dbxref ON (
			     tmcv.accession = dbxref.accession
			     AND
			     tmcv.db_id = dbxref.db_id
            )
			WHERE dbxref.accession is NULL
			AND 
			dbxref.db_id IS NULL

[insert_existing_accession]
           INSERT INTO temp_accession_exist(accession,cvterm_id)
               SELECT dbxref.accession,cvterm.cvterm_id
                   FROM cvterm
                   INNER JOIN 
                   dbxref ON cvterm.dbxref_id = dbxref.dbxref_id
                   INNER JOIN 
                   temp_cvterm tmcv ON dbxref.accession = tmcv.accession
                   AND
                   dbxref.db_id = tmcv.db_id

[insert_updatable_comment]
    INSERT INTO cvtermprop(cvterm_id, type_id, value)
		SELECT tmacc.cvterm_id, tcomm.comment_type_id, tcomm.comment
		FROM temp_cvterm_comment tcomm
		INNER JOIN temp_accession_exist tmacc ON
			tmacc.accession = tcomm.accession

[insert_updatable_synonym]           
	    INSERT INTO cvtermsynonym(synonym, type_id, cvterm_id)
	    SELECT syn,syn_scope_id,cvterm_id FROM temp_synonym_update 



[delete_updatable_comment]
           DELETE FROM cvtermprop WHERE cvterm_id IN (
               SELECT cvterm_id from temp_accession_exist
            ) 
            AND
            type_id = (
               SELECT cvterm_id from cvterm
               INNER JOIN cv ON cv.cv_id = cvterm.cv_id
               WHERE cv.name = 'cvterm_property_type'
               AND cvterm.name = 'comment'
            )

[delete_updatable_synonym]
    DELETE FROM cvtermsynonym 
           WHERE cvterm_id IN (
               SELECT cvterm_id FROM temp_synonym_update
           )
           AND
           type_id IN (
               SELECT cvterm_id from cvterm
               INNER JOIN cv ON cv.cv_id = cvterm.cv_id
               WHERE cv.name = 'synonym_type'
            )

